



const data = require('../../lib/data')
const {hash}= require('../../helpers/utilities')
const {environment}= require('../../helpers/environments')
const {parseJSON}= require('../../helpers/utilities')


const handler = {};

handler.checkHandler = (requestProperties, callback) => {
    const acceptMethods =['get','post','put','delete'];
    if(acceptMethods.indexOf(requestProperties.method)>-1){
        handler._check[requestProperties.method](requestProperties,callback)


    }
    else {
        callback(405)
    }
   
    };
handler._check = {};

handler._check.post=(requestProperties,callback)=>{
   let protocol = typeof(requestProperties.body.protocol)==='string' && ['http','https'].indexOf(requestProperties.body.protocol)>-1? requestProperties.body.protocol: false
   let url = typeof(requestProperties.body.url)==='string' &&  requestProperties.body.url.trim().length>0 ? requestProperties.body.url: false
   let method = typeof(requestProperties.body.method)==='string' &&  ['get','post','put','delete'].indexOf(requestProperties.body.method) > -1? requestProperties.body.method: false
   let successcodes = typeof(requestProperties.body.successcodes)==='object' &&  requestProperties.body.successcodes instanceof Array ? requestProperties.body.successcodes: false
   let timeoutseconds = typeof(requestProperties.body.timeoutseconds)==='number' &&  requestProperties.body.timeoutseconds % 1 ===0 &&  requestProperties.body.timeoutseconds >1 && requestProperties.body.timeoutseconds< 5 ? requestProperties.body.timeoutseconds: false

   if(protocol && url && method && successcodes && timeoutseconds)
   {
             const token = 
             typeof requestProperties.headerObject.token === 'string' ? requestProperties.headerObject.token : false
   
              data.read('tokens',token,(err1,tokendata)=>{
                if(!err1 && tokendata){
                    let userphone = parseJSON(tokendata).phone
                
                    data.read('users',userphone ,(err2,userdata)=>{
                        if(!err2 && userdata)
                        {

                        }
                        else{
                            callback(403,{
                                error: 'authentication failed!',
                            });
                        }
                    })
                }else{
                    callback(403,{
                        error: 'authentication failed!',
                    });
                }
              })
            }
   else{
    callback(400,{
        error: 'you have a problem in your request!!!',
    });
   }
}




handler._check.get=(requestProperties,callback)=>{
    
}
handler._check.put=(requestProperties,callback)=>{
    
}
handler._check.delete=(requestProperties,callback)=>{
    
}



module.exports = handler;